#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <conio.h>
#include <unistd.h>
#include <time.h>
#include <windows.h>

char player[30];

enum
{
KEY_ESC     = 27,
KEY_ENTER   = 13,
ARROW_UP    = 256 + 72,
ARROW_LEFT  = 256+75,
ARROW_RIGHT = 256 + 77
};

char menus[5][1000] = {
        "Jogar",
        "Recordes",
        "Tutorial",
        "Sair"};

static int get_code(void);
void tutorial(void);
void jogarCobrinha(int nivel);
void olharRecordes(void);
void generateMenu(int choice);
void generateMenu(int choice){
    int count;
    printf("\n\n\n);
    for (count=0;count<4;count++){
          if(choice==count){
              printf("\t[*] %s\n",menus[count]);
          }else{
              printf("\t[ ] %s\n",menus[count]);
          }
    }

    SMALL_RECT windowSize = {0 , 0 , 39 , 12};
    SetConsoleWindowInfo(GetStdHandle(STD_OUTPUT_HANDLE), TRUE, &windowSize);

    int ch;

    while (( ch = get_code()) != KEY_ESC ){
        switch (ch)
        {
        case ARROW_UP:
            system("cls");
            if(choice>0){
            	choice=choice-1;
            }
            generateMenu(choice);
            break;
        case ARROW_DOWN:
            system("cls");
            if(choice<3){
            	choice=choice+1;
            }
            generateMenu(choice);
            break;
        case ARROW_LEFT:
            printf("LEFT\n");
            break;
        case ARROW_RIGHT:
            printf("RIGHT\n");
            break;
        case KEY_ENTER:
        	switch(choice){
        		case 0:
        			jogarCobrinha(1);
        			break;
        		case 1:
        			OlharRecordes();
        			break;
        		case 2:
        			Tutorial();
        			break;
        		case 3:
        			printf("Saindo");
        			exit(0);
        			break;
        	}
        	break;
        }
    }	   
}
void irColunaLinha(int coluna, int linha)
{
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),(COORD) {
        coluna,linha
    });
}

// Estrutura para inserir o nome do player e carregamento do jogo
void carregando(){
	int i;
	system("cls");
	printf("Nome do player\n");
	scanf("%[^\n]s", &jogador);
	system("cls");
	printf("Carregando\n");
	char load[11] = "carregando";
	for (i = 0; i < 11; ++i)
	{
		printf("%c ",load[i]);
		Sleep(((rand() % 100) + 350));
	}
	printf("...\nCarregamento terminou\n");
	sleep(1);
	printf("Inicializando");
	system("cls");
}
void limitesMatriz(void){
	int i, j;
	system("cls");
	int matriz[12][39];

	for (i = 0; i < 12; ++i)
	{
		for (j = 0; j < 39; ++j)
		{
			if((j==0) || (i==0) || (i==11) || (j==38)){
				printf("|");
			}else{
				printf(" ");
			}
		}
		printf("\n");
	}	
}

void mostrarGameOver(int pontuacao){ 

	FILE *arquivo = fopen("recordes.txt", "a"); 

	if(arquivo!=NULL){
		fprintf(arquivo, "\n %03dP - %s", pontuacao,jogador);
		fclose(arquivo);
	}else{
		printf("Sem recordes!\n");
	}

	Sleep(600);
	limitesMatriz();
	irColunaLinha(4,4);
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	irColunaLinha(10,5);
	printf("F I M  D E  J O G O");
	irColunaLinha(4,6);
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	getch();
	system("cls");
	generateMenu(0);	
}

void jogarCobrinha(int nivel){
	int cobraX[38*13] = {}; 				
	int cobraY[13*38] = {}; 				
	int PontoPX,PontoPY; 					
	int i, comprimento = 15; 				
	int pontuacao = 1; 						
	int ch; 								
	int velocidade = 300;  					
	char teclou; 						
	loading();
	limitesMatriz();

    PontoPX=(rand()%37)+1;
    PontoPY=(rand()%10)+1;	

    irColunaLinha(0,12);
    printf("Aperte uma tecla para iniciar");

    cobraX[0] = (rand()%37)+1;
    cobraY[0] = (rand()%10)+1;
    irColunaLinha(cobraX[0],cobraY[0]);
    printf("%c",'O');

    ch = get_code();
 	while (ch != KEY_ESC ){
 		
 		int i;
 		for (i = 0; i < 37; ++i)
 		{
 			irColunaLinha(i,12);
 			printf(" ");
 		}

        if(
        	(cobraY[0]==0)||
        	(cobraY[0]==12)||
        	(cobraX[0]==0)||
        	(cobraX[0]==38)
        	)
        {
        	mostrarGameOver(pontuacao);
        } 		
		for(i=comprimento; i>0; i--){   
        	cobraX[i]=cobraX[i-1];
            	cobraY[i]=cobraY[i-1];
        }

	// Apaga o rastro da cobra
        irColunaLinha(cobraX[comprimento],cobraY[comprimento]);
        printf(" "); 

        if(kbhit()){
        	ch = get_code();        
        }

        // Verifica o código da tecla que foi pressionada para fazer a ação correta
        switch ((int) ch){
	        case ARROW_UP:
	        	cobraY[0]--;
	            break;
	        case ARROW_DOWN:
	        	cobraY[0]++;
	            break;
	        case ARROW_LEFT:
	        	cobraX[0]--;
	            break;
	        case ARROW_RIGHT:
	        	cobraX[0]++;
	            break;
            default:
            	ch = get_code();
            	break;
        }

if(PontoPX==cobraX[0]&&PontoPY==cobraY[0])
	{   
    	    comprimento++; 													
            pontuacao++; 															
            PontoPX=(rand()%37)+1;										
            PontoPY=(rand()%10)+1;
        }        

        irColunaLinha(cobraX[0],cobraY[0]);
        printf("%c",'O'); 

	    irColunaLinha(0,12);
	    printf("Pontos: %d - %s", pontuacao,jogador);

Sleep(300);
        // Verifica se a cobra bateu nela mesma
        for(i=1; i<comprimento; i++) {
            if(cobraX[0]==cobraX[i]&&cobraY[0]==cobraY[i]){
				mostrarGameOver(pontuacao);
            }
        }

        // Indo para a posiÃ§Ã£o para imprimir o proximo ponto
        irColunaLinha(PontoPX,PontoPY);
        printf("%c",'+');
    }	

	getch();
	system("cls");
	generateMenu(0);		
}
